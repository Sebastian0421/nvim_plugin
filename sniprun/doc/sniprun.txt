*sniprun*

Minimum version of neovim: 0.43, recommended >= 0.5

Authors: Michael bleuez <michael.bleuez2@gmail.com>
         Vigouroux Thomas <tomvig38@gmail.com>
         Dingcheng Yue <DarwinSenior@gmail.com>
         https://github.com/michaelb/sniprun/graphs/contributors


==============================================================================
INTRODUCTION                                           *sniprun-intro*

Sniprun is a code runner plugin that run, and if necessary, compile beforehand, snippets (visual selection)
of your code.


==============================================================================
QUICK START                                       *sniprun-quickstart*




:'<'>Sniprun        Send current visual selection (line-wise) to Sniprun
:SnipRun            Send the current line to Sniprun


:SnipReset    Restart sniprun (that will also clear the cache that helps Sniprun compile faster)
:SnipInfo     Get info about sniprun and the available / current interpreter


==============================================================================
ALL COMMANDS                                       *sniprun-commands*

:SnipRun                 Send the current line  to Sniprun
:'<'>Sniprun             Send current visual selection (line-wise) to Sniprun

:SnipReset               Restart sniprun (that will also clear the cache that may help Sniprun compile faster)

:SnipReplMemoryClean     If you sent incorrect code to a interpreter with enabled REPL mode, you can clear the 
                         REPL 'memory' with that. It will forget all variables you have defined previously etc..

:SnipTerminate          Kill Sniprun and child processes (equivalent to SnipReset but does not clean the cache)

:SnipInfo               Get Sniprun version info and info about the available interpreters

:SnipClose              Clear virtual text and close splits and floating windows created by sniprun

:SnipLive               Toggle live mode (read the docs on github.com/michaelb/sniprun first !)
                        This command is not available by default given how much important knowledge about that is


==============================================================================
CONFIGURATION                                       *sniprun-configuration*

Add the setup() call somewhere in your config files and modify the fields as needed, relevant info can be found with :SnipInfo

Note: the 'lua << EOF .... EOF' part is only needed if you configure sniprun in a vimscript (.vim) file. If you configure sniprun in a lua file (.lua), directly 'require' sniprun.

You can omit configuration fields to let them follow the defaults; so the most basic sniprun config is just:

lua  <<EOF
require'sniprun'.setup()
EOF


This is an example of all the available fields:

lua << EOF
require'sniprun'.setup({
  selected_interpreters = {'Python3_fifo'},        --" use those instead of the default for the current filetype
  repl_enable = {'Python3_fifo', 'R_original'},    --" enable REPL-like behavior for the given interpreters
  repl_disable = {},                               --" disable REPL-like behavior for the given interpreters

  interpreter_options = {
      C_original = { compiler = "clang" },
      GFM_original = {
         default_filetype = 'bash'
      }
   },


  inline_messages = 0,             --" inline_message (0/1) is a one-line way to display messages
                                   --" to workaround sniprun not being able to display anything

  borders = 'single',              --" type display borders around floating windows, if used
                                   --" possible values are 'none', 'single', 'double', or 'shadow'

  -- customize highlight groups (setting this field in configuration overrides colorscheme)
 snipruncolors = {
    SniprunVirtualTextOk   =  {bg="#66eeff",fg="#000000",ctermbg="Cyan",cterfg="Black"},
    SniprunFloatingWinOk   =  {fg="#66eeff",ctermfg="Cyan"},
    SniprunVirtualTextErr  =  {bg="#881515",fg="#000000",ctermbg="DarkRed",cterfg="Black"},
    SniprunFloatingWinErr  =  {fg="#881515",ctermfg="DarkRed"},
  },
  show_no_output = {
    "Classic",
    "TempFloatingWindow",      --# implies LongTempFloatingWindow, which has no effect on its own
    -- ....etc
  },

  --" you can combo different display modes as desired
  display = {
    "Classic",                    -- "display results in the command-line  area
    "VirtualTextOk",              -- "display ok results as virtual text (multiline is shortened)
    -- "VirtualTextErr",          -- "display error results as virtual text
    -- "TempFloatingWindow",      -- "display results in a floating window
    -- "LongTempFloatingWindow",  -- "same as above, but only long results. To use with VirtualText__
    -- "Terminal"                 -- "display results in a vertical split
    -- "TerminalWithCode",        --# display results and code history in a vertical split
    -- "NvimNotify",              --# display with the nvim-notify plugin
    -- "Api"                      --# return output to a programming interface
  },
})
EOF




==============================================================================
TROUBLESHOOTING                                  *sniprun-troubleshooting*

If anything is not working; you should consult the README at github.com/michaelb/sniprun, as well as the
documentation for every interpreter through :SnipInfo <name>, as well as the :checkhealth sniprun
